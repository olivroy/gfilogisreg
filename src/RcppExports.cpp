// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_umax
Rcpp::List get_umax(const arma::mat& P, const arma::vec& b);
RcppExport SEXP _gfilogisreg_get_umax(SEXP PSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(get_umax(P, b));
    return rcpp_result_gen;
END_RCPP
}
// get_vmin_i
double get_vmin_i(const arma::mat& P, const arma::vec& b, const size_t i, const arma::vec& mu);
RcppExport SEXP _gfilogisreg_get_vmin_i(SEXP PSEXP, SEXP bSEXP, SEXP iSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(get_vmin_i(P, b, i, mu));
    return rcpp_result_gen;
END_RCPP
}
// get_vmin
arma::vec get_vmin(const arma::mat& P, const arma::vec& b, const arma::vec& mu);
RcppExport SEXP _gfilogisreg_get_vmin(SEXP PSEXP, SEXP bSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(get_vmin(P, b, mu));
    return rcpp_result_gen;
END_RCPP
}
// get_bounds
Rcpp::List get_bounds(const arma::mat& P, const arma::vec& b);
RcppExport SEXP _gfilogisreg_get_bounds(SEXP PSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(get_bounds(P, b));
    return rcpp_result_gen;
END_RCPP
}
// rcd
arma::mat rcd(const size_t n, const arma::mat& P, const arma::vec& b);
RcppExport SEXP _gfilogisreg_rcd(SEXP nSEXP, SEXP PSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rcd(n, P, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gfilogisreg_get_umax", (DL_FUNC) &_gfilogisreg_get_umax, 2},
    {"_gfilogisreg_get_vmin_i", (DL_FUNC) &_gfilogisreg_get_vmin_i, 4},
    {"_gfilogisreg_get_vmin", (DL_FUNC) &_gfilogisreg_get_vmin, 3},
    {"_gfilogisreg_get_bounds", (DL_FUNC) &_gfilogisreg_get_bounds, 2},
    {"_gfilogisreg_rcd", (DL_FUNC) &_gfilogisreg_rcd, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gfilogisreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
